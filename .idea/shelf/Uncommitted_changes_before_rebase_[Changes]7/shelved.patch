Index: Cocktail/src/main/kotlin/org/programmers/cocktail/search/service/CommentsService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.programmers.cocktail.search.service\r\n\r\nimport org.programmers.cocktail.repository.comments.CommentsRepository\r\nimport org.programmers.cocktail.search.dto.CommentsTO\r\nimport org.springframework.beans.factory.annotation.Autowired\r\nimport org.springframework.stereotype.Service\r\n\r\n@Service\r\nclass CommentsService {\r\n    @Autowired\r\n    var commentsRepository: CommentsRepository? = null\r\n\r\n    @Autowired\r\n    var commentsMapper: CommentsMapper? = null\r\n\r\n    fun findByCocktailId(cocktailId: Long?): List<CommentsTO> {\r\n        val commentsList = commentsRepository!!.findByCocktailId(cocktailId)\r\n\r\n        if (commentsList!!.isEmpty()) {\r\n            return emptyList()\r\n        }\r\n\r\n        val commentsTOList = commentsMapper!!.convertToCommentsTOList(commentsList)\r\n\r\n        return commentsTOList\r\n    }\r\n\r\n    fun insertComments(commentsTO: CommentsTO?): Int {\r\n        // TO->Entity 변환\r\n\r\n        val comments = commentsMapper!!.convertToComments(commentsTO)\r\n        try {\r\n            commentsRepository!!.save(comments)\r\n        } catch (e: Exception) {\r\n            println(\"[에러]\" + e.message)\r\n            return FAIL\r\n        }\r\n\r\n        return SUCCESS\r\n    }\r\n\r\n    fun deleteById(commentsTO: CommentsTO): Int {\r\n        val commentsId: Long = commentsTO.setId()\r\n\r\n        val commentsDeleteResult =\r\n            commentsRepository!!.deleteByIdWithReturnAffectedRowCount(commentsId)\r\n\r\n        if (commentsDeleteResult == 0) {\r\n            return FAIL\r\n        }\r\n\r\n        return SUCCESS\r\n    }\r\n\r\n\r\n    companion object {\r\n        const val SUCCESS: Int = 1\r\n        const val FAIL: Int = 0\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Cocktail/src/main/kotlin/org/programmers/cocktail/search/service/CommentsService.kt b/Cocktail/src/main/kotlin/org/programmers/cocktail/search/service/CommentsService.kt
--- a/Cocktail/src/main/kotlin/org/programmers/cocktail/search/service/CommentsService.kt	(revision ff012721d2c1fd8bc601cfb6cf7c3b446cf5feb0)
+++ b/Cocktail/src/main/kotlin/org/programmers/cocktail/search/service/CommentsService.kt	(date 1737698719576)
@@ -39,8 +39,8 @@
         return SUCCESS
     }
 
-    fun deleteById(commentsTO: CommentsTO): Int {
-        val commentsId: Long = commentsTO.setId()
+    fun deleteById(commentsTO: CommentsTO?): Int {
+        val commentsId: Long = commentsTO?.id ?: return FAIL
 
         val commentsDeleteResult =
             commentsRepository!!.deleteByIdWithReturnAffectedRowCount(commentsId)
Index: Cocktail/src/main/kotlin/org/programmers/cocktail/search/controller/SearchController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.programmers.cocktail.search.controller\r\n\r\nimport org.programmers.cocktail.global.Utility.SearchUtils\r\nimport org.programmers.cocktail.global.annotation.RequireLogin\r\nimport org.programmers.cocktail.search.dto.CocktailListsTO\r\nimport org.programmers.cocktail.search.dto.CocktailsTO\r\nimport org.programmers.cocktail.search.dto.CommentsTO\r\nimport org.programmers.cocktail.search.enums.FindAllByOrderDescActionType\r\nimport org.programmers.cocktail.search.enums.UpdateLikesInfoByUserActionType\r\nimport org.programmers.cocktail.search.service.CocktailLikesService\r\nimport org.programmers.cocktail.search.service.CocktailListsService\r\nimport org.programmers.cocktail.search.service.CocktailsService\r\nimport org.programmers.cocktail.search.service.CommentsService\r\nimport org.springframework.beans.factory.annotation.Autowired\r\nimport org.springframework.http.ResponseEntity\r\nimport org.springframework.web.bind.annotation.*\r\nimport org.springframework.web.bind.support.SessionStatus\r\nimport java.util.*\r\n\r\n@RestController\r\n@RequestMapping(\"/api\")\r\nclass SearchController {\r\n    @Autowired\r\n    private val cocktailsService: CocktailsService? = null\r\n\r\n    @Autowired\r\n    private val cocktailListsService: CocktailListsService? = null\r\n\r\n    @Autowired\r\n    private val cocktailLikesService: CocktailLikesService? = null\r\n\r\n    @Autowired\r\n    private val commentsService: CommentsService? = null\r\n\r\n    @Autowired\r\n    private val searchUtils: SearchUtils? = null\r\n\r\n    @GetMapping(\"/cocktails/top/{criteria}\")\r\n    fun getTopHitsCocktails(@PathVariable criteria: String): ResponseEntity<List<CocktailsTO?>> {\r\n        var cocktailsDescTOList: List<CocktailsTO?> = Collections.EMPTY_LIST as List<CocktailsTO?>\r\n\r\n        if (criteria == \"likes\") {\r\n            cocktailsDescTOList =\r\n                cocktailsService!!.findAllByOrderDesc(FindAllByOrderDescActionType.ORDER_BY_LIKES)\r\n        } else if (criteria == \"hits\") {\r\n            cocktailsDescTOList =\r\n                cocktailsService!!.findAllByOrderDesc(FindAllByOrderDescActionType.ORDER_BY_HITS)\r\n        }\r\n\r\n        val top5cocktails = if (cocktailsDescTOList.size > 5) cocktailsDescTOList.subList(\r\n            0,\r\n            5\r\n        ) else cocktailsDescTOList\r\n\r\n        if (top5cocktails.isEmpty()) {\r\n            throw RuntimeException(\"Failed to get Top Likes Cocktails\") // TopLikesCocktail 가져오기 실패(500반환)\r\n        }\r\n\r\n        return ResponseEntity.ok(top5cocktails)\r\n    }\r\n\r\n    @GetMapping(\"/favorites/cocktails/{cocktailId}\")\r\n    @RequireLogin\r\n    fun isFavoritedByUser(\r\n        @SessionAttribute(value = \"semail\", required = false) sessionValue: String?,\r\n        @PathVariable cocktailId: String,\r\n        sessionStatus: SessionStatus?\r\n    ): ResponseEntity<Int> {\r\n        val PRESENT = 1\r\n        val ABSENT = 0\r\n\r\n        //userid, cocktailid가 cocktail_lists에 존재하는지 확인( SUCCESS: 1, FAIL: 0 )\r\n        val isCocktailListsPresent = cocktailListsService!!.findByUserIdAndCocktailId(\r\n            searchUtils!!.searchUserByUserEmail(sessionValue).getId(), cocktailId.toLong()\r\n        )\r\n\r\n        if (isCocktailListsPresent == 0) {\r\n            return ResponseEntity.ok(ABSENT) // 즐겨찾기 조회 성공(즐겨찾기 없는 경우 - 200 반환)\r\n        }\r\n\r\n        return ResponseEntity.ok(PRESENT) // 즐겨찾기 조회 성공(즐겨찾기 있는 경우 - 200반환)\r\n    }\r\n\r\n    @PostMapping(\"/favorites/cocktails/{cocktailId}\")\r\n    @RequireLogin\r\n    fun addFavoritesByUser(\r\n        @SessionAttribute(\r\n            value = \"semail\",\r\n            required = false\r\n        ) sessionValue: String?, @PathVariable cocktailId: String\r\n    ): ResponseEntity<Void> {\r\n        // cocktail_lists에 user_id, cocktail_id 저장\r\n\r\n        val cocktailListsTO = CocktailListsTO()\r\n        cocktailListsTO.setUserId(searchUtils!!.searchUserByUserEmail(sessionValue).getId())\r\n        cocktailListsTO.setCocktailId(cocktailId.toLong())\r\n\r\n        // SUCCESS: 1, FAIL: 0\r\n        val cocktailListInsertResult = cocktailListsService!!.insertCocktailList(cocktailListsTO)\r\n\r\n        if (cocktailListInsertResult == 0) {\r\n            throw RuntimeException(\"Failed to add a new favorite to the cocktail_lists table\") // DB추가 실패(500반환)\r\n        }\r\n\r\n        return ResponseEntity.noContent().build() //DB추가 성공(204반환)\r\n    }\r\n\r\n    @DeleteMapping(\"/favorites/cocktails/{cocktailId}\")\r\n    @RequireLogin\r\n    fun deleteFavoritesByUser(\r\n        @SessionAttribute(\r\n            value = \"semail\",\r\n            required = false\r\n        ) sessionValue: String?, @PathVariable cocktailId: String\r\n    ): ResponseEntity<Void> {\r\n        // cocktail_lists에서 user_id, cocktail_id 삭제\r\n\r\n        val cocktailListsTO = CocktailListsTO()\r\n        cocktailListsTO.setUserId(searchUtils!!.searchUserByUserEmail(sessionValue).getId())\r\n        cocktailListsTO.setCocktailId(cocktailId.toLong())\r\n\r\n        // SUCCESS: 1, FAIL: 0\r\n        val cocktailListDeleteResult = cocktailListsService!!.deleteCocktailList(cocktailListsTO)\r\n\r\n        if (cocktailListDeleteResult == 0) {\r\n            throw RuntimeException(\"Failed to add a new favorite to the cocktail_lists table\") // DB삭제 실패(500반환)\r\n        }\r\n\r\n        return ResponseEntity.noContent().build() //DB삭제 성공\r\n    }\r\n\r\n    @GetMapping(\"/likes/cocktails/{cocktailId}\")\r\n    @RequireLogin\r\n    fun isLikedByUser(\r\n        @SessionAttribute(value = \"semail\", required = false) sessionValue: String?,\r\n        @PathVariable cocktailId: String\r\n    ): ResponseEntity<Int> {\r\n        val PRESENT = 1\r\n        val ABSENT = 0\r\n\r\n        // userid, cocktailid가 cocktail_likes에 존재하는지 확인(SUCCESS: 1, FAIL: 0)\r\n        val isCocktailLikesPresent = cocktailLikesService!!.findByUserIdAndCocktailId(\r\n            searchUtils!!.searchUserByUserEmail(sessionValue).getId(), cocktailId.toLong()\r\n        )\r\n\r\n        if (isCocktailLikesPresent == 0) {\r\n            return ResponseEntity.ok(ABSENT) // 좋아요 조회 성공(좋아요 없는 경우 - 200 반환)\r\n        }\r\n\r\n        return ResponseEntity.ok(PRESENT) // 좋아요 조회 성공(좋아요 있는 경우 - 200반환)\r\n    }\r\n\r\n    @PostMapping(\"/likes/cocktails/{cocktailId}\")\r\n    @RequireLogin\r\n    fun addLikesByUser(\r\n        @SessionAttribute(value = \"semail\", required = false) sessionValue: String?,\r\n        @PathVariable cocktailId: String\r\n    ): ResponseEntity<Long> {\r\n        return ResponseEntity.ok(\r\n            cocktailLikesService!!.updateLikesInfoByUser(\r\n                sessionValue,\r\n                cocktailId,\r\n                UpdateLikesInfoByUserActionType.ADD\r\n            )\r\n        ) //DB추가 성공(200반환, 좋아요갯수 반환)\r\n    }\r\n\r\n    @DeleteMapping(\"/likes/cocktails/{cocktailId}\")\r\n    @RequireLogin\r\n    fun deleteLikesByUser(\r\n        @SessionAttribute(\r\n            value = \"semail\",\r\n            required = false\r\n        ) sessionValue: String?, @PathVariable cocktailId: String\r\n    ): ResponseEntity<Long> {\r\n        return ResponseEntity.ok(\r\n            cocktailLikesService!!.updateLikesInfoByUser(\r\n                sessionValue,\r\n                cocktailId,\r\n                UpdateLikesInfoByUserActionType.DELETE\r\n            )\r\n        ) //DB삭제 성공(200반환, 좋아요 갯수 반환)\r\n    }\r\n\r\n    @GetMapping(\"/reviews/cocktails/{cocktailId}\")\r\n    fun loadCocktailComments(@PathVariable cocktailId: String): ResponseEntity<List<CommentsTO>> {\r\n        val commentsTOList = commentsService!!.findByCocktailId(cocktailId.toLong())\r\n\r\n        println(\"commentsTOList: $commentsTOList\")\r\n        if (commentsTOList.isEmpty() || commentsTOList == null) {\r\n            println(\"commentsTOListisempty\")\r\n            return ResponseEntity.noContent().build() // 상태코드 204 전송\r\n        }\r\n\r\n        return ResponseEntity.ok(commentsTOList)\r\n    }\r\n\r\n    @PostMapping(\"/reviews/cocktails/{cocktailId}\")\r\n    @RequireLogin\r\n    fun registerCocktailComments(\r\n        @SessionAttribute(value = \"semail\", required = false) sessionValue: String?,\r\n        @PathVariable cocktailId: String,\r\n        @RequestBody commentsTOFromClient: CommentsTO\r\n    ): ResponseEntity<Void> {\r\n        val commentsTO = CommentsTO()\r\n        commentsTO.setContent(commentsTOFromClient.getContent())\r\n        commentsTO.setUserId(searchUtils!!.searchUserByUserEmail(sessionValue).getId())\r\n        commentsTO.setCocktailId(cocktailId.toLong())\r\n\r\n        // SUCCESS: 1, FAIL: 0\r\n        val commentsInsertResult = commentsService!!.insertComments(commentsTO)\r\n\r\n        if (commentsInsertResult == 0) {\r\n            throw RuntimeException(\"Failed to add a new Comment to the comments table\") // DB추가 실패(500반환)\r\n        }\r\n\r\n        return ResponseEntity.noContent().build() // DB추가 성공(204반환)\r\n    }\r\n\r\n    @DeleteMapping(\"/reviews/cocktails/{reviewId}\")\r\n    @RequireLogin\r\n    fun deleteCocktailComments(\r\n        @SessionAttribute(\r\n            value = \"semail\",\r\n            required = false\r\n        ) sessionValue: String?, @PathVariable reviewId: String\r\n    ): ResponseEntity<Void> {\r\n        val commentsTO = CommentsTO()\r\n        commentsTO.setId(reviewId.toLong())\r\n\r\n        val commentsDeleteResult = commentsService!!.deleteById(commentsTO)\r\n\r\n        // SUCCESS: 1, FAIL: 0\r\n        if (commentsDeleteResult == 0) {\r\n            throw RuntimeException(\"Failed to delete a Comment in the comments table\") // DB삭제 실패(500반환)\r\n        }\r\n        return ResponseEntity.noContent().build() // DB삭제 성공(204반환)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Cocktail/src/main/kotlin/org/programmers/cocktail/search/controller/SearchController.kt b/Cocktail/src/main/kotlin/org/programmers/cocktail/search/controller/SearchController.kt
--- a/Cocktail/src/main/kotlin/org/programmers/cocktail/search/controller/SearchController.kt	(revision ff012721d2c1fd8bc601cfb6cf7c3b446cf5feb0)
+++ b/Cocktail/src/main/kotlin/org/programmers/cocktail/search/controller/SearchController.kt	(date 1737698719589)
@@ -202,7 +202,7 @@
         @PathVariable cocktailId: String,
         @RequestBody commentsTOFromClient: CommentsTO
     ): ResponseEntity<Void> {
-        val commentsTO = CommentsTO()
+        val commentsTO : CommentsTO? = CommentsTO()
         commentsTO.setContent(commentsTOFromClient.getContent())
         commentsTO.setUserId(searchUtils!!.searchUserByUserEmail(sessionValue).getId())
         commentsTO.setCocktailId(cocktailId.toLong())
@@ -226,7 +226,7 @@
         ) sessionValue: String?, @PathVariable reviewId: String
     ): ResponseEntity<Void> {
         val commentsTO = CommentsTO()
-        commentsTO.setId(reviewId.toLong())
+        commentsTO.id = reviewId.toLong()
 
         val commentsDeleteResult = commentsService!!.deleteById(commentsTO)
 
